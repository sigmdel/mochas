#!/usr/bin/python3
#
# mochas - Domoticz Mochad bridge assistant
#
# A script to handle X10 bright/dim RF packets for dimmable devices in Domoticz
# version 0.4 (2024-03-02)
#
# Copyright (c) 2024 sigmdel <https://sigmdel.ca>
# This software is placed in the public domain. Where this is not legally
# acceptable, the Zero Clause BSD license applies <https://spdx.org/licenses/0BSD.html>
# SPDX-License-Identifier: 0BSD

# This executable file should be installed in /usr/local/bin/
# The systemd service file, mochas.service, should be in /etc/systemd/system/
# The JSON configuration file, mochas.json, should be in /etc/mochas/

# Configuration file template
#
# {
#   "LOGLEVEL": "error",
#   "HOST": "192.168.168.168.1",
#   "PORT": 1099,
#   "HOUSE": "K",
#   "DELTA": 15,
#   "CREDS64": "",
#   "TLS": false,
#   "VERIFY": true,
#   "DOMOTICZ": "192.168.168.2:8080",
#   "DEVICES": {
#     "6": 66,
#     "7": 177,
#     "8": 288
#   }
# }
#
# CREDS64, TLS and VERIFY are optional
#
# Location of configuration file
CONFIG = "/etc/mochas/mochas.json"

MOCHAD_TIMEOUT = 5  # seconds timeout on opening mochad socket

import socket
import errno
import json
import requests
import syslog

def disable_insecureWarning():
    import urllib3;
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    # Removes this warning when making https request:
    # /usr/lib/python3/dist-packages/urllib3/connectionpool.py:1020: InsecureRequestWarning: Unverified HTTPS request is being made to host '192.168.1.22'.
    # Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings


# Global variables
settings = {}      # dictionnary with all program settings, see defaults below
url_prefix = ""    # define after reading settings
http_header = {}   # for user:password (base64 encoded) authentication
verify_ca = False  # only done if https is used
current_unit = ""  # current unit number

# Returns Domoticz idx for the given X10 unit number or
# -1 if the X10 unit number is not in settings['DEVICES'].
def get_idx(unit):
    try:
        idx = settings["DEVICES"][unit]
    except:
        idx = -1
    if idx < 0:
        syslog.syslog(syslog.LOG_INFO, f"Unit {unit} is not dimmable")
    else:
        syslog.syslog(syslog.LOG_DEBUG, f"Unit {unit} is dimmable device idx {idx}")
    return idx

# Common HTTP request to Domoticz, returns the Domoticz response if
# the HTTP return code is 200 code or raises an exception
def make_request(query):
    rq = requests.get(f"{url_prefix}{query}", headers=http_header, verify=verify_ca, timeout=2)
    rq.raise_for_status()  # HTTP errors (i.e. 404) will become an HTTPError exception
    syslog.syslog(syslog.LOG_DEBUG, f"Response to '{query}' query: {repr(rq)[:48]}...")
    return rq

# Returns the light level of the given Domoticz device if it is dimmable
# otherwise -1
def get_level(idx):
    if idx < 0: return -1  # sanity check
    with make_request(f"getdevices&rid={idx}") as rq:
        try:
           data = rq.json()["result"][0]
           if not data["SwitchType"] == "Dimmer":
              syslog.syslog(syslog.LOG_ERR, f"device {idx} is not a dimmer")
           elif not data["DimmerType"] == "abs":
              syslog.syslog(syslog.LOG_ERR, f"dimmer {idx} level is not set absolutely")
           elif not data["MaxDimLevel"] == 100:
              syslog.syslog(syslog.LOG_ERR, f"the level of dimmer {idx} is not a percentage")
           else:
              level = data["LevelInt"]
              if (level < 0) or (level > 100):
                 syslog.syslog(syslog.LOG_ERR, f"dimmer {idx} level ({level}) is invalid")
              else:
                 return level
        except KeyError as e:
           syslog.syslog(syslog.LOG_ERR, f"No key named {e} in device {idx} status")
        except Exception as e:
            syslog.syslog(syslog.LOG_ERR, f"Error {e} reading device {idx} status")
    return -1

# Sets the light level of the given Domoticz device
def set_level(idx, value):
    with make_request(f"switchlight&idx={idx}&switchcmd=Set%20Level&level={value}"):
        syslog.syslog(syslog.LOG_DEBUG, f"dimmer {idx} level set to {value}")
    # Good idea to call get_level() to check ??

# Adds delta to the light level of the X10 device,
# Returns
#   -1 if 'unit' is not in the configuration devices
#   -2 if unable to get the current level of the Domoticz device
#   >= 0, the new level of the device
def update_level(unit, delta):
    currentIdx = get_idx(unit)
    if currentIdx < 0: return -1
    oldLevel = get_level(currentIdx)
    if oldLevel < 0: return -2
    if oldLevel == 1: oldLevel = 0
    newLevel = oldLevel + delta
    # clamp the value
    if newLevel > 100:
        newLevel = 100
    elif newLevel < 10:
        newLevel = 1  # can't set level to 0
    set_level(currentIdx, newLevel)
    if newLevel <= 1:
        with make_request(f"switchlight&idx={currentIdx}&switchcmd=Off"):
            pass
        newLevel = 0
    syslog.syslog(syslog.LOG_INFO, f"level of dimmer {unit} (idx={currentIdx}) changed from {oldLevel} to {newLevel}")
    return newLevel

# Syntax of Rx RF packets
#
# 0     1        2  3  4          5  6     7
# 02/20 18:53:40 Rx RF HouseUnit: J3 Func: On
# 02/20 19:13:08 Rx RF House:     J  Func: Bright
#
# Invariant: parts 2 = Rx and 6 = Func


# Parses X10 RF packet to ensure a valid packet was received
# and in the case of
#  a HouseUnit packet, save the unit number in current_unit
#  a House packet, change the level of the current unit with update_level
def handle_X10_rf_packet(data):
    global current_unit
    syslog.syslog(syslog.LOG_DEBUG, f"(current_unit='{current_unit}'; X10 packet={data}")
    parts = data.split(' ')
    #for e in parts: print(e)

    # Check the structure of the packet
    if len(parts) < 8:
        syslog.syslog(syslog.LOG_DEBUG, "X10 packet too short") # happens often
        return

    if (parts[2] != "Rx") or (parts[6] != "Func:"):
        syslog.syslog(syslog.LOG_DEBUG, "Not valid X10 Rx packet")
        return

    if (parts[3] != "RF") and (part[3] != "PL"):
        syslog.syslog(syslog.LOG_DEBUG, "Not valid X10 RF or PL packet")
        return

    if settings['HOUSE'] != parts[5][0]:
        syslog.syslog(syslog.LOG_DEBUG, f"House '{parts[5][0]}' is not monitored")
        return

    #remove trailing LF
    action = parts[7].rstrip()

    # switch on address type of packet
    if parts[4] == "HouseUnit:":
        if (action == "On" or action == "Off"):
            try:
               unit = int(parts[5][1:])
               if (unit < 1)  or (unit > 16):
                   raise ValueError
               current_unit = str(unit)
               syslog.syslog(syslog.LOG_DEBUG, f"Current unit set to '{current_unit}'")
            except:
                syslog.syslog(syslog.LOG_DEBUG, f"'{parts[5][1:]}' is an invalid device number")
        else:
            syslog.syslog(syslog.LOG_DEBUG, f"'{action}' is an invalid action")
        return
    if parts[4] == "House:":
        if not current_unit:
            syslog.syslog(syslog.LOG_DEBUG, "No current unit defined")
            return
        delta = settings['DELTA']
        if action  == "Dim":
            delta = -delta
        elif not action == "Bright":
            syslog.syslog(syslog.LOG_DEBUG, f"'{action}' is an invalid action")
            return
        clev = update_level(current_unit, delta)
        if clev < -1:
            syslog.syslog(syslog.LOG_DEBUG, f"could not get current level of unit {current_unit}")
        elif clev == -1:
            syslog.syslog(syslog.LOG_DEBUG, "no matching device")
        else:
            syslog.syslog(syslog.LOG_DEBUG, f"level of unit {current_unit} set to {clev}")
        return
    syslog.syslog(syslog.LOG_DEBUG, f"'{parts[4]}' is an invalid address type")


BUFFER_SIZE = 1024  # ample size for an X10 RF packet

# The main loop of the program, it receives all RF packets from
# mochad and calls on handle_X10_rf_packet.
# The loop exists when the connection to mochad is broken.
# Default timeout on Linux Mint is ~ 130 seconds!
def listen_to_mochad(host, port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.settimeout(MOCHAD_TIMEOUT)
        s.connect((host, port))
        s.settimeout(None)
        syslog.syslog(syslog.LOG_INFO, 'Connected to mochad')
        while True:
            data = s.recv(BUFFER_SIZE)
            if not data:
                raise OSError(errno.ECONNRESET, "Connection to mochad reset")
            handle_X10_rf_packet(data.decode())

# Sets the syslog log level ('error', 'info', 'debug')
def set_loglevel(level):
    level = level.upper()[:3]
    if level=="ERR":
       loglevel = syslog.LOG_ERR
    elif level=="DEB":
       loglevel = syslog.LOG_DEBUG
    else:
       loglevel = syslog.LOG_INFO    # assume 'info'
    syslog.setlogmask(syslog.LOG_UPTO(loglevel))

# Loads the configuration file
def load_config():
    global settings
    global url_prefix
    global http_header
    global verify_ca

    settings = {}
    try:
        with open(CONFIG, 'r', encoding="utf-8") as f:
           settings = json.load(f)

        # Keys CREDS64, TLS and VERIFY are optional, so set their default value
        # if they are not set in the configuration file
        settings.setdefault('CREDS64', '')
        settings.setdefault('TLS', False)
        settings.setdefault('VERIFY', True)

        # Check that all keys present
        keys = settings.keys();
        wanted = ['LOGLEVEL', 'HOST', 'PORT', 'HOUSE', 'DELTA', 'DOMOTICZ', 'CREDS64', 'TLS', 'VERIFY', 'DEVICES']
        for want in wanted:
            if not want in keys:
                syslog.syslog(syslog.LOG_ERR, f'Key "{want}" missing from {CONFIG}')
                exit(6)
        syslog.syslog(syslog.LOG_DEBUG, f"Settings: {settings}")

        if settings['CREDS64']:
            http_header['Authorization'] = f"Basic {settings['CREDS64']}"
            syslog.syslog(syslog.LOG_DEBUG, "Basic authentication will be used")
        else:
            http_header = {}
            syslog.syslog(syslog.LOG_DEBUG, "No authentication will be used")

        protocol = "http"
        if settings['TLS']:
            protocol = "https"
            verify_ca = settings['VERIFY']
            if not verify_ca:
                disable_insecureWarning()
        else:
            verify_ca = False  # only done if TLS is used

        syslog.syslog(syslog.LOG_DEBUG, f"Will use {protocol} with verify CA set to {verify_ca}")

        set_loglevel(settings["LOGLEVEL"])
        url_prefix = f'{protocol}://{settings["DOMOTICZ"]}/json.htm?type=command&param='
    except FileNotFoundError:
        syslog.syslog(syslog.LOG_ERR, "Configuration file {} not found".format(CONFIG))
        exit(4)
    except Exception as E:
        syslog.syslog(syslog.LOG_ERR, "Error reading {}, {}".format(CONFIG, repr(E)))
        exit(5)

#-----------------------------------------------------------------------

syslog.openlog('mochas', syslog.LOG_UPTO(syslog.LOG_DEBUG))
syslog.syslog("Starting mochas")
load_config()

try:
    listen_to_mochad(settings["HOST"], settings["PORT"])

except KeyboardInterrupt:
    syslog.syslog(syslog.LOG_ERR, "User interrupt")  ## exit code 130
    exit(1)
except OSError as E:
    # 104 - connection to mochad reset because CM1x disconnected
    # 111 - connection refused because mochad not started (CM1x not connected) or mochad port incorrect
    # 113 - no route to host because HOST = 192.168.1.32 while mochad 192.168.1.23
    # time out because HOST = 192.18.1.32  where mochad  192.168.1.23
    # HTTP errors will also transit through this exception handler
    syslog.syslog(syslog.LOG_ERR, f"OS error: {E}")
    exit(2)
except Exception as E:
    syslog.syslog(syslog.LOG_ERR, f"Exception: {repr(E)}")
    exit(3)
